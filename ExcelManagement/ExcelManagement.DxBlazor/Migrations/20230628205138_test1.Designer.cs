// <auto-generated />
using System;
using ExcelManagement.DxBlazor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExcelManagement.DxBlazor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230628205138_test1")]
    partial class test1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyCreatedByPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyLogoUrl")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("CompanyUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyUpdatedByPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyCreatedByPersonId");

                    b.HasIndex("CompanyUpdatedByPersonId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.FileAndFolder", b =>
                {
                    b.Property<Guid>("FilesAndFolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid?>("FileAndFolderCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileAndFolderCreatedByPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("FileAndFolderUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileAndFolderUpdatedByPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("RelativeFilePath")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FilesAndFolderId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FileAndFolderCreatedByPersonId");

                    b.HasIndex("FileAndFolderUpdatedByPersonId");

                    b.HasIndex("GroupId");

                    b.ToTable("FilesAndFolders");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid?>("GroupCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupCreatedByPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("GroupId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupLogoUrl")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("GroupUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupUpdatedByPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GroupId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GroupCreatedByPersonId");

                    b.HasIndex("GroupId1");

                    b.HasIndex("GroupUpdatedByPersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.Person", b =>
                {
                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bio")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FileAndFolderFilesAndFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("MemberCompanyId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonCreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonId");

                    b.HasIndex("FileAndFolderFilesAndFolderId");

                    b.HasIndex("MemberCompanyId");

                    b.HasIndex("PersonCreatedById");

                    b.HasIndex("PersonUpdatedById");

                    b.ToTable("People");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid?>("FileAndFolderFilesAndFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("RoleCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleCreatedByPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleLogoUrl")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid?>("RoleUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleUpdatedByPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FileAndFolderFilesAndFolderId");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoleCreatedByPersonId");

                    b.HasIndex("RoleUpdatedByPersonId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.Company", b =>
                {
                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", "CompanyCreatedBy")
                        .WithMany("CreatedCompanys")
                        .HasForeignKey("CompanyCreatedByPersonId");

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", "CompanyUpdatedBy")
                        .WithMany("UpdatedCompanys")
                        .HasForeignKey("CompanyUpdatedByPersonId");

                    b.Navigation("CompanyCreatedBy");

                    b.Navigation("CompanyUpdatedBy");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.FileAndFolder", b =>
                {
                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Company", "Company")
                        .WithMany("FileAndFolders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", "FileAndFolderCreatedBy")
                        .WithMany("CreatedFileAndFolders")
                        .HasForeignKey("FileAndFolderCreatedByPersonId");

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", "FileAndFolderUpdatedBy")
                        .WithMany("UpdatedFileAndFolders")
                        .HasForeignKey("FileAndFolderUpdatedByPersonId");

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Group", null)
                        .WithMany("FileAndFolders")
                        .HasForeignKey("GroupId");

                    b.Navigation("Company");

                    b.Navigation("FileAndFolderCreatedBy");

                    b.Navigation("FileAndFolderUpdatedBy");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.Group", b =>
                {
                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Company", "Company")
                        .WithMany("Groups")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", "GroupCreatedBy")
                        .WithMany("CreatedGroups")
                        .HasForeignKey("GroupCreatedByPersonId");

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Group", null)
                        .WithMany("Groups")
                        .HasForeignKey("GroupId1");

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", "GroupUpdatedBy")
                        .WithMany("UpdatedGroups")
                        .HasForeignKey("GroupUpdatedByPersonId");

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", null)
                        .WithMany("Groups")
                        .HasForeignKey("PersonId");

                    b.Navigation("Company");

                    b.Navigation("GroupCreatedBy");

                    b.Navigation("GroupUpdatedBy");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.Person", b =>
                {
                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.FileAndFolder", null)
                        .WithMany("Persons")
                        .HasForeignKey("FileAndFolderFilesAndFolderId");

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Company", "MemberCompany")
                        .WithMany("CompanyMembers")
                        .HasForeignKey("MemberCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", "PersonCreatedBy")
                        .WithMany("CreatedPersons")
                        .HasForeignKey("PersonCreatedById");

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", "PersonUpdatedBy")
                        .WithMany("UpdatedPersons")
                        .HasForeignKey("PersonUpdatedById");

                    b.Navigation("MemberCompany");

                    b.Navigation("PersonCreatedBy");

                    b.Navigation("PersonUpdatedBy");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.Role", b =>
                {
                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Company", "Company")
                        .WithMany("Roles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.FileAndFolder", null)
                        .WithMany("Roles")
                        .HasForeignKey("FileAndFolderFilesAndFolderId");

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", null)
                        .WithMany("Roles")
                        .HasForeignKey("PersonId");

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", "RoleCreatedBy")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("RoleCreatedByPersonId");

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.Person", "RoleUpdatedBy")
                        .WithMany("UpdatedRoles")
                        .HasForeignKey("RoleUpdatedByPersonId");

                    b.Navigation("Company");

                    b.Navigation("RoleCreatedBy");

                    b.Navigation("RoleUpdatedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExcelManagement.DxBlazor.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.Company", b =>
                {
                    b.Navigation("CompanyMembers");

                    b.Navigation("FileAndFolders");

                    b.Navigation("Groups");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.FileAndFolder", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.Group", b =>
                {
                    b.Navigation("FileAndFolders");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("ExcelManagement.DxBlazor.Data.Models.Person", b =>
                {
                    b.Navigation("CreatedCompanys");

                    b.Navigation("CreatedFileAndFolders");

                    b.Navigation("CreatedGroups");

                    b.Navigation("CreatedPersons");

                    b.Navigation("CreatedRoles");

                    b.Navigation("Groups");

                    b.Navigation("Roles");

                    b.Navigation("UpdatedCompanys");

                    b.Navigation("UpdatedFileAndFolders");

                    b.Navigation("UpdatedGroups");

                    b.Navigation("UpdatedPersons");

                    b.Navigation("UpdatedRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
