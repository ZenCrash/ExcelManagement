@using DxBlazor.Data
@using DxBlazor.Pages
@using ClassLibary
@using ClassLibary.Models

@using ClosedXML.Excel

@page "/fileselection"

@*Logo*@
<div style="width: 100%; height: auto; display: flex; justify-content: center;">
    <img src="/images/index.png" style="width: 50%" />
</div>
<p> </p>
<p> </p>


@*Loading Animation*@
@if (IsLoadingRender)
{
    <div class="text-center">
        <div class="spinner-border text-secondary" role="status">
            <span class="sr-only">Loading</span>
        </div>
        <h2>Loading...</h2>
    </div>
}
else
{
    if (!IsWorkbookSelected) //Select Workbook
    {
        <h3>Please select a excel document:</h3>
        <p></p>
        <DxComboBox Data="@Files"
            NullText="Select a File..."
            Value="@SelectedFileName"
            ValueChanged="(string fileName) => { FileSelection(fileName); }">
        </DxComboBox>
    }

    else //If Workbook Has Been Selected
    {
        <WorkbookComponent SelectedFileName="@SelectedFileName"
                   FileList="Files"
                   DirectoryPath="@DirectoryPath"
                   AlertMessage="@Alert"
                   NewFileName="@NewWorkbookSelected">
        </WorkbookComponent>
    }

    @*Alert*@
    <p></p>
    <p></p>
    @foreach (AlertMessageModel message in alertMessages)
    {
        <AlertMessage model="@message" dispose="DisposeAlert" />
    }
}

@code {
    //Loading
    bool IsLoadingRender { get; set; } = true;
    bool IsWorkbookSelected { get; set; } = false;
    //Files
    private string SelectedFileName { get; set; }
    private string DirectoryPath { get; set; }
    private List<string> Files { get; set; } = new();
    // Alert
    List<AlertMessageModel> alertMessages = new();
    //File Logic
    FileLogic fileLogic = new();

    //---------------------------------------------------------------------------//
    /* Razor Page                                                                */
    //---------------------------------------------------------------------------//

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DirectoryPath = @"..\ExcelDocuments"; //Default dirictory
            GetFiles(DirectoryPath);

            IsLoadingRender = false;
            StateHasChanged();
        }
    }

    //Get files in from dirictory.
    private void GetFiles(string directoryPath)
    {
        var fileNames = Directory.GetFiles(directoryPath, "*.xlsx");
        Files.AddRange(fileNames.Select(fileName => Path.GetFileNameWithoutExtension(fileName)));
    }

    //File has been Selected
    private void FileSelection(string fileName)
    {
        SelectedFileName = fileName;
        string selectedFileName = ((fileName.Contains(" ") && fileName == fileName.Replace(" ", "")) || fileName == null) ? null : fileName;

        if (!((fileName.Contains(" ") && selectedFileName == selectedFileName.Replace(" ", "")) || selectedFileName == null))
        {
            if (fileLogic.IsFileAccessable(DirectoryPath, selectedFileName))
            {
                IsWorkbookSelected = true;
            }

            else
            {
                Alert(new AlertMessageModel(AlertMessageModel.AlertType.FileInaccessible));
            }

            StateHasChanged();
        }
    }

    //New File has been selected from the WorkbookComponents
    public void NewWorkbookSelected(string newWorkbookName)
    {
        SelectedFileName = newWorkbookName;
    }

    //---------------------------------------------------------------------------//
    /* Alert Messages                                                           */
    //---------------------------------------------------------------------------//

    //Add alert messgae to alert list
    private void Alert(AlertMessageModel alertObject)
    {
        alertMessages.Add(alertObject);
    }

    // Dispose alert message
    private void DisposeAlert(Guid guid)
    {
        try
        {
            //alertMessages.Remove(alertMessages.Single(message => message.Guid.CompareTo(guid) == 0));
            AlertMessageModel alertToBeDeleted = alertMessages.Find(alert => alert.Guid == guid);
            if (alertToBeDeleted != null)
            {
                alertMessages.Remove(alertToBeDeleted);
            }
        }
        catch
        {

        }
    }
}