@using System.Dynamic

@using ExcelManagement.DxBlazor.Data
@using ExcelManagement.DxBlazor.Pages
@using ExcelManagement.ClassLibary
@using ExcelManagement.ClassLibary.Models

@using DevExpress.Data
@using ClosedXML.Excel

@if (IsLoadingRender)
{
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <div class="text-center">
        <div class="spinner-border text-secondary" role="status">
            <span class="sr-only">Loading</span>
        </div>
        <h2>Loading @SheetData.Key...</h2>
    </div>
}
else
{
    <DxGrid @ref="Grid"
        Data="@SheetData.Value"
        PageSize="10"
        PagerPosition="GridPagerPosition.TopAndBottom"
        PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] {5, 10, 20, 50, 100})"
        PageSizeSelectorAllRowsItemVisible="true"
        PagerSwitchToInputBoxButtonCount="10"
        PagerVisibleNumericButtonCount="10"
        EditMode="GridEditMode.PopupEditForm"
        PopupEditFormCssClass="pw-800"
        PopupEditFormHeaderText="Edit Row"
        ValidationEnabled="false"
        KeyFieldName="GridId"
        EditModelSaving="@((args) => Grid_EditModelSaving(args, SheetData.Key))"
        DataItemDeleting="@((args) => Grid_DataItemDeleting(args, SheetData.Key))"
        CustomizeEditModel="@((args) => Grid_CustomizeEditModel(args, SheetData.Key))">

        <Columns>
            <DxGridCommandColumn Width="160px" />
            @foreach (var property in ((IDictionary<string, object>)SheetData.Value[0]).Keys.Skip(1))
            {
                <DxGridDataColumn FieldName="@property" MinWidth="100" />
            }
        </Columns>
        <EditFormTemplate Context="EditFormContext">
            <DxFormLayout CssClass="w-100">
                @if (fileLogic.IsFileAccessable(DirectoryPath, SelectedFileName))
                {
                    @foreach (var property in ((IDictionary<string, object>)SheetData.Value[0]).Keys.Skip(1))
                    {
                        var dataItem = (IDictionary<string, object>)EditFormContext.EditModel;
                        var xlCellView = (XlCellView)dataItem[property];

                        var xlCell = xlCellView.XlCell;
                        var cellValue = xlCellView.Value;
                        var cellType = xlCellView.Type;
                        var validation = xlCell.GetDataValidation();

                        <DxFormLayoutItem Caption="@(property + ":")" ColSpanMd="6">

                            @*If Cell has Formula*@
                            @if (xlCell.HasFormula)
                            {
                                //var value = @"=" + ((XlCellView)dataItem[property]).XlCell.FormulaA1; //display cell formel instead
                                var value = (string)cellValue;
                                <DxTextBox Text="@value"
                                   ReadOnly="true"
                                   Enabled="false" />
                            }

                            @*If Cell has data validation*@
                            else if (!(validation.MinValue == "" || validation.MinValue == null))
                            {
                                var value = (string)cellValue;
                                List<string> dataValidationElements = DataValidationLogic.ConvertStringToList(validation.MinValue);
                                <DxComboBox Data="@dataValidationElements"
                                Value="@value"
                                ValueChanged="@((string newVal) => ((XlCellView)dataItem[property]).Value = newVal)" />
                            }

                            @*If Value Text*@
                            else if (cellType == XLDataType.Text)
                            {
                                var value = (string)cellValue;
                                <DxTextBox Text="@value"
                                           TextChanged="@((string newVal) => ((XlCellView)dataItem[property]).Value = newVal)"
                                           TextExpression="@(() => value)" />
                            }

                            @*If Value Blank*@
                            else if (cellType == XLDataType.Blank)
                            {
                                var value = (string)cellValue;
                                <DxTextBox Text="@value"
                                           TextChanged="@((string newVal) => ((XlCellView)dataItem[property]).Value = newVal)"
                                           TextExpression="@(() => value)" />
                            }

                            @*If Value Number*@
                            else if (cellType == XLDataType.Number)
                            {
                                var value = (double)cellValue;
                                <DxSpinEdit Text="@value"
                                            ValueChanged="@((double newVal) => ((XlCellView)dataItem[property]).Value = newVal)"
                                            ValueExpression="@(() => value)" />
                            }

                            @*If Value Datetime*@
                            else if (cellType == XLDataType.DateTime)
                            {
                                var value = (DateTime)cellValue;
                                <DxDateEdit Date="@value"
                                            DateChanged="@((DateTime newVal) => ((XlCellView)dataItem[property]).Value = newVal)"
                                            DateExpression="@(() => value)" />
                            }

                        </DxFormLayoutItem>
                    }
                }
                else
                {
                    //this alert messge is here incase the exceldocument is opened before editing a row.
                    //if form submitted while document is open operation will still fail but user just lost all their progress.
                    AlertMessage.InvokeAsync(new AlertMessageModel(AlertMessageModel.AlertType.FileInaccessible));
                }

            </DxFormLayout>
        </EditFormTemplate>

    </DxGrid>
}

@code {
    [Parameter] public string SelectedFileName { get; set; }
    [Parameter] public string DirectoryPath { get; set; }
    [Parameter] public KeyValuePair<string, List<dynamic>> SheetData { get; set; }
    [Parameter] public EventCallback UpdateWorkbook { get; set; }
    [Parameter] public EventCallback<AlertMessageModel> AlertMessage { get; set; }
    //Loading
    bool IsLoadingRender { get; set; } = true;
    public IGrid? Grid { get; set; }
    //Repository
    ExcelRepository excelRepository = new();
    //File Logic
    FileLogic fileLogic = new();

    protected async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoadingRender = false;
            StateHasChanged();
        }
    }

    //---------------------------------------------------------------------------//
    /* CRUD Operations - Repository Interactions                                 */
    //---------------------------------------------------------------------------//

    //Edit Model
    private async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e, string sheetName)
    {
        if (e.IsNew)
        {
            var model = new ExpandoObject() as IDictionary<string, object>;
            var dataItem = (IDictionary<string, object>)excelRepository.GetFirstRow(SelectedFileName, sheetName, DirectoryPath);

            model = dataItem;
            e.EditModel = model;
        }
    }

    //Save Row
    private async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e, string sheetName)
    {
        var updatedDataItem = e.EditModel;
        var originalDataItem = e.DataItem;

        bool operationSucess = excelRepository.UpdateRowInExcel(sheetName, updatedDataItem, SelectedFileName, DirectoryPath);

        if (operationSucess)
        {
            await UpdateWorkbook.InvokeAsync();
            AlertMessage.InvokeAsync(new AlertMessageModel(AlertMessageModel.AlertType.EditRowSuccess));
        }
        else
        {
            AlertMessage.InvokeAsync(new AlertMessageModel(AlertMessageModel.AlertType.EditRowFailed));
        }

        StateHasChanged();

    }

    //Delete Row
    private async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e, string sheetName)
    {
        var deletedDataItem = e.DataItem;
        var cellRow = (int)((IDictionary<string, object>)deletedDataItem).First().Value;

        bool operationSucess = excelRepository.DeleteRowInSheet(cellRow, sheetName, SelectedFileName, DirectoryPath);

        if (operationSucess)
        {
            await UpdateWorkbook.InvokeAsync();
            AlertMessage.InvokeAsync(new AlertMessageModel(AlertMessageModel.AlertType.DeleteRowSuccess));
        }
        else
        {
            AlertMessage.InvokeAsync(new AlertMessageModel(AlertMessageModel.AlertType.DeleteRowFailed));
        }

        StateHasChanged();
    }

    //---------------------------------------------------------------------------//
    /* Other                                                                     */
    //---------------------------------------------------------------------------//


}