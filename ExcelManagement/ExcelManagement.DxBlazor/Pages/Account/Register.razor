@using ExcelManagement.DxBlazor.Data.DbOption.Interface;
@using ExcelManagement.DxBlazor.Data.DbOption.Repository;
@using ExcelManagement.DxBlazor.Data.DTO;
@using ExcelManagement.DxBlazor.Data.DTOMapper;
@using ExcelManagement.DxBlazor.Data.Models;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.Identity.Client;
@using System.ComponentModel.DataAnnotations;

@inject ICompanyRepository CompanyRepository;
@inject IDepartmentRepository DepartmentRepository;

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager navigationManager

@page "/register"

<h3>Register2</h3>


<div class="row" style="margin:50px">
    <div class="col-md-4">
        @if (CompanyDTOs != null && CompanyDTOs.Count > 0)
        {
            <EditForm Model="@Input" OnValidSubmit="OnPostAsync">
                <DataAnnotationsValidator />

                @*Email*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@Input.Email">Email:</label>
                    <InputText class="form-control" id="@Input.Email" @bind-Value="@Input.Email" type="email" />
                    <ValidationMessage For="@(() => Input.Email)" class="text-danger" />
                </div>
                @*Password*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@Input.Password">Password:</label>
                    <InputText class="form-control" id="@Input.Password" @bind-Value="@Input.Password" type="password" />
                    <ValidationMessage For="@(() => Input.Password)" class="text-danger" />
                </div>
                @*First Name*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@Input.FirstName">First Name:</label>
                    <InputText class="form-control" id="@Input.FirstName" @bind-Value="@Input.FirstName" type="text" />
                    <ValidationMessage For="@(() => Input.FirstName)" class="text-danger" />
                </div>
                @*Last Name*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@Input.LastName">Last Name:</label>
                    <InputText class="form-control" id="@Input.LastName" @bind-Value="@Input.LastName" />
                    <ValidationMessage For="@(() => Input.LastName)" class="text-danger" />
                </div>
                @*Company*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@Input.CompanyDTOId">Company:</label>
                    <InputSelect class="form-select" id="@Input.CompanyDTOId" ValueExpression="@(() => Input.CompanyDTOId)" ValueChanged="@((Guid value) => OnCompanyChange(value))">
                        @if (CompanySelected)
                        {
                            <option selected value="@null">--Select Company--</option>
                        }
                        else
                        {
                            @foreach (var company in CompanyDTOs)
                            {
                                <option value="@company.Id">@company.CompanyName</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Input.CompanyDTOId)" class="text-danger" />
                </div>
                @*Department*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@Input.DepartmentDTOId">Department:</label>
                    <InputSelect class="form-select" id="@Input.DepartmentDTOId" @bind-Value="Input.DepartmentDTOId" disabled="@CompanySelected">
                        @if (CompanySelected)
                        {
                            <option value="@null">--None--</option>
                        }
                        else
                        {
                            @foreach (var department in DepartmentDTOs)
                            {
                                <option value="@department.Id">@department.DepartmentName</option>
                            }

                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Input.DepartmentDTOId)" class="text-danger" />
                </div>
                @*Role*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@Input.SelectedRole">Role:</label>
                    <InputSelect class="form-select" id="@Input.SelectedRole" @bind-Value="Input.SelectedRole">
                        else
                        {
                        @foreach (var roles in Input.Roles)
                        {
                            <option value="@roles.Key">@roles.Value</option>
                        }

                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Input.SelectedRole)" class="text-danger" />
                </div>

                <button type="submit">Submit</button>
            </EditForm>

            <ul class="text-danger">
                @foreach (var item in errorMessages)
                {
                    <li>
                        <p>@item</p>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No companies available.</p>
        }
    </div>
</div>




@code {
    private RegisterModel Input { get; set; } = new();
    private List<DepartmentDTO> DepartmentDTOs { get; set; } = new();
    private List<CompanyDTO> CompanyDTOs { get; set; } = new();

    private bool CompanySelected { get; set; } = true;
    private List<string> errorMessages { get; set; } = new();

    protected override void OnInitialized()
    {
        GetAllCompanies();
    }


    private async Task OnPostAsync()
    {
        errorMessages = new List<string>();
        bool hasErrors = false;

        //Does user exist in the system?
        var userExists = await UserManager.FindByEmailAsync(Input.Email);
        if (userExists != null)
        {
            string error = "Username/Email is already in use.";
            errorMessages.Add(error);
            hasErrors = true;
        }

        //Valid CompanyId
        if (!CompanyDTOs.Exists(x => x.Id == Input.CompanyDTOId))
        {
            string error = "Company selected is not valid";
            errorMessages.Add(error);
            hasErrors = true;
        }

        //Valid DepartmentId
        if (Input.DepartmentDTOId != null && !DepartmentDTOs.Exists(x => x.Id == Input.DepartmentDTOId))
        {
            string error = "Department selected is not valid";
            errorMessages.Add(error);
            hasErrors = true;
        }
        //Valid Role
        if (Input.SelectedRole != null && !Enum.IsDefined(typeof(RegisterModel.Role), Input.SelectedRole))
        {
            string error = "Role selected is not valid";
            errorMessages.Add(error);
            hasErrors = true;
        }

        //if Errors
        if (hasErrors)
        {
            StateHasChanged();
            return;
        }

        //Create new user
        var identity = new ApplicationUser
            {
                UserName = Input.Email,
                Email = Input.Email,
                Person = new Person
                {
                    Id = Guid.NewGuid(),
                    FirstName = Input.FirstName,
                    LastName = Input.LastName,
                    CompanyId = Input.CompanyDTOId,
                    DepartmentId = Input.DepartmentDTOId,
                }
            };
        var result = await UserManager.CreateAsync(identity, Input.Password);

        //Create new role

        var role = new IdentityRole(Input.SelectedRole.ToString());
        var addRoleResult = await RoleManager.CreateAsync(role);
        var addUserRoleResult = await UserManager.AddToRoleAsync(identity, Input.SelectedRole.ToString());

        //Signin
        if (result.Succeeded && addRoleResult.Succeeded && addUserRoleResult.Succeeded)
        {
            await SignInManager.SignInAsync(identity, isPersistent: false);
            navigationManager.NavigateTo("~/");
        }
    }

    //Logic
    private async Task GetAllCompanies()
    {
        var companies = CompanyRepository.GetAll();
        CompanyDTOs = CompanyMapper.MapCompanyToDTOList(companies).ToList();
    }

    private async Task OnCompanyChange(Guid companyId)
    {
        var departments = DepartmentRepository.GetAllByCompanyId(companyId);

        if (departments == null || departments.Count == 0)
        {
            CompanySelected = true;
        }

        DepartmentDTOs = DepartmentMapper.MapDepartmentToDTOList(departments).ToList();

        CompanySelected = false;
        StateHasChanged();
    }


}
