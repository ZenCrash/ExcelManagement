@using ExcelManagement.DxBlazor.Data
@using ExcelManagement.DxBlazor.Pages
@using ExcelManagement.ClassLibary
@using ExcelManagement.ClassLibary.Models

@using ClosedXML.Excel

@*Workbook / Tab Component*@
@if (IsLoadingRender) //Loading Animation
{
    <div class="text-center">
        <div class="spinner-border text-secondary" role="status">
            <span class="sr-only">Loading</span>
        </div>
        <h2>Loading Excel Document...</h2>
    </div>
}
else
{
    <h1><span style="color: gray;">Excel Document: </span>@SelectedFileName</h1>

    <DxTabs ScrollMode="TabsScrollMode.NavButtons"
        @bind-ActiveTabIndex="@ActiveTabIndex">
        @foreach (var sheetData in Data)
        {
            <DxTabPage Text="@sheetData.Key" TabIconCssClass="oi oi-spreadsheet">
                <WorksheetComponent SelectedFileName="@SelectedFileName"
                        DirectoryPath="@DirectoryPath"
                        SheetData="@sheetData"
                        UpdateWorkbook="@GetWorkbook">
                </WorksheetComponent>
            </DxTabPage>
        }
        @*Add New Sheet*@
        <DxTab TabIconCssClass="oi oi-plus" Click="@(() => AddNewSheet(SelectedFileName))"></DxTab>
    </DxTabs>
}
@*Alert*@
@foreach (AlertMessageModel message in alertMessages)
{
    <AlertMessage model="@message" dispose="DisposeAlert" />
}


@code {
    [Parameter] public string SelectedFileName { get; set; }
    [Parameter] public string DirectoryPath { get; set; }
    //Loading
    bool IsLoadingRender { get; set; } = true;
    //Files
    private List<string> Files { get; set; } = new List<string>();
    //TabIndex
    private int _ActiveTabIndex { get; set; }
    private int ActiveTabIndex
    {
        get => _ActiveTabIndex;
        set { _ActiveTabIndex = (value == Data.Count) ? Data.Count - 1 : value; }
    }
    //Get Data
    private Dictionary<string, List<dynamic>> Data;
    ExcelRepository excelRepository;

    //test
    string testString { get; set; } = "No";

    // Alert
    List<AlertMessageModel> alertMessages = new List<AlertMessageModel>();


    //---------------------------------------------------------------------------//
    /* Razor Page                                                                */
    //---------------------------------------------------------------------------//

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetWorkbook();

            IsLoadingRender = false;
            StateHasChanged();
        }
    }

    //---------------------------------------------------------------------------//
    /* CRUD Operations - Repository Interactions                                 */
    //---------------------------------------------------------------------------//

    //GetData
    private async Task GetWorkbook()
    {
        string workbookName = SelectedFileName;
        string directory = DirectoryPath;
        excelRepository = new ExcelRepository();
        Data = excelRepository.GetSheetsByBookname(workbookName, directory);

        StateHasChanged();
    }

    //AddTab
    private void AddNewSheet(string newWorksheetName = "")
    {
        newWorksheetName.Replace(" ", "");
        newWorksheetName = (newWorksheetName == newWorksheetName.Replace(" ", "")) ? "" : newWorksheetName;
        string workbookName = SelectedFileName;
        string directory = DirectoryPath;

        excelRepository.CreateWorksheet(workbookName, newWorksheetName, directory);
        alertMessages.Add(new AlertMessageModel("A tab was create sucessfully"));
        GetWorkbook();
    }

    // Dispose alert message
    private async Task DisposeAlert(Guid guid)
    {
        alertMessages.Remove(alertMessages.Single(message => message.Guid.CompareTo(guid) == 0));
    }
}