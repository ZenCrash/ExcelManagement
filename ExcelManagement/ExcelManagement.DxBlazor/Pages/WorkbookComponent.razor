@using System.IO

@using ExcelManagement.DxBlazor.Data
@using ExcelManagement.DxBlazor.Pages
@using ExcelManagement.ClassLibary
@using ExcelManagement.ClassLibary.Models

@using ClosedXML.Excel

@inject IJSRuntime JS;

@*Workbook / Tab Component*@
@if (IsLoadingRender) //Loading Animation
{
    <div class="text-center">
        <div class="spinner-border text-secondary" role="status">
            <span class="sr-only">Loading</span>
        </div>
        <h2>Loading Excel Document...</h2>
    </div>
}
else
{


    <DxTabs ScrollMode="TabsScrollMode.NavButtons"
        @bind-ActiveTabIndex="@ActiveTabIndex">
        @foreach (var sheetData in Data)
        {
            <DxTabPage Text="@sheetData.Key" TabIconCssClass="oi oi-spreadsheet">
                <WorksheetComponent SelectedFileName="@SelectedFileName"
                        DirectoryPath="@DirectoryPath"
                        SheetData="@sheetData"
                        UpdateWorkbook="@GetWorkbook"
                        AlertMessage="@(async (alert) => await AlertMessage.InvokeAsync(alert))">
                </WorksheetComponent>
            </DxTabPage>
        }
        @*Add New Sheet*@
        <DxTab TabIconCssClass="oi oi-plus" Click="@(() => AddNewSheet())"></DxTab>
    </DxTabs>
}

@code {
    [Parameter] public string SelectedFileName { get; set; }
    [Parameter] public string DirectoryPath { get; set; }
    [Parameter] public EventCallback<AlertMessageModel> AlertMessage { get; set; }
    //Loading
    bool IsLoadingRender { get; set; } = true;
    //Files
    private List<string> Files { get; set; } = new();
    //TabIndex
    private int _ActiveTabIndex { get; set; }
    private int ActiveTabIndex
    {
        get => _ActiveTabIndex;
        set { _ActiveTabIndex = (value == Data.Count) ? Data.Count - 1 : value; }
    }
    //Get Data
    private Dictionary<string, List<dynamic>> Data;
    ExcelRepository excelRepository = new();
    //Upload Files
    private long maxFileSize = 1024 * 1024 * 100; //Represents 100 MB
    private int maxAllowedFiles = 1;
    private string acceptedFileFormats = $".xlsx"; // "" = accepts all file formats


    //---------------------------------------------------------------------------//
    /* Razor Page                                                                */
    //---------------------------------------------------------------------------//

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetWorkbook();

            IsLoadingRender = false;
            StateHasChanged();
        }
    }

    //---------------------------------------------------------------------------//
    /* CRUD Operations - Repository Interactions                                 */
    //---------------------------------------------------------------------------//

    //GetData
    private async Task GetWorkbook()
    {
        string workbookName = SelectedFileName;
        string directory = DirectoryPath;
        Data = excelRepository.GetSheetsByBookname(workbookName, directory);
    }

    //AddTab
    private void AddNewSheet(string newWorksheetName = "")
    {
        newWorksheetName = (newWorksheetName == newWorksheetName.Replace(" ", "") || newWorksheetName == null) ? "" : newWorksheetName;
        string workbookName = SelectedFileName;
        string directory = DirectoryPath;

        bool operationSucess = excelRepository.CreateWorksheet(workbookName, newWorksheetName, directory);
        if (operationSucess)
        {
            GetWorkbook();

            AlertMessage.InvokeAsync(new AlertMessageModel(AlertMessageModel.AlertType.NewSheetSuccess));
        }
        else
        {
            AlertMessage.InvokeAsync(new AlertMessageModel(AlertMessageModel.AlertType.NewSheetFailed));
        }


        StateHasChanged();
    }

    //---------------------------------------------------------------------------//
    /* File Management                                                           */
    //---------------------------------------------------------------------------//

    //Download File
    private Stream GetFileStream()
    {
        // ..\ExcelDocuments
        string filePath = DirectoryPath + @"\" + SelectedFileName + ".xlsx";
        return File.OpenRead(filePath);
    }

    

    private async Task DownloadFileFromStream()
    {
        try
        {
            var fileStream = GetFileStream();
            var fileName = SelectedFileName + ".xlsx";

            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

            await AlertMessage.InvokeAsync(new AlertMessageModel(AlertMessageModel.AlertType.DownloadSuccess));
        }
        catch
        {
            await AlertMessage.InvokeAsync(new AlertMessageModel(AlertMessageModel.AlertType.DownloadFailed));
        }

    }

    
    //Upload File Button Navigation Helper (<DxButten> => <InputFile>)
    private async Task TriggerFileUpload()
    {
        await JS.InvokeVoidAsync("triggerFileUpload");
    }

    //Upload File
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        if(e.FileCount > maxAllowedFiles) //if file count is invalid. if true, exit method
        {
            await AlertMessage.InvokeAsync(new AlertMessageModel(AlertMessageModel.AlertType.ExceededMaxFileLimit,$"{e.FileCount}",$"{maxAllowedFiles}"));
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

                string filePath = Path.Combine(DirectoryPath, "temp", newFileName);
                string directoryPath = Path.Combine(DirectoryPath, "temp");

                if (!Directory.Exists(directoryPath))
                {
                    var directoryInfo = Directory.CreateDirectory(directoryPath);
                    directoryInfo.Attributes = directoryInfo.Attributes | FileAttributes.Hidden; //Hidden
                }

                await using FileStream fs = new(filePath, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                await AlertMessage.InvokeAsync(new AlertMessageModel(AlertMessageModel.AlertType.UploadFailed, $"{file.Name}", $"{ex.Message}"));
            }
            
        }
    }

}